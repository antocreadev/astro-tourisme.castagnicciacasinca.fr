---
import HeroGallery from "./HeroGallery.jsx";

export interface Props {
  data?: any;
}

const { data } = Astro.props;

// Parser le texte markdown pour extraire les parties
const parseHeroText = (text) => {
  if (!text)
    return {
      title: "Destination Castagniccia Casinca,",
      subtitle:
        "à la découverte d'une Corse authentique, entre villages perchés, plages et saveurs du terroir",
      description:
        "Explorez l'une des régions les plus authentiques de Corse...",
    };

  const lines = text.split("\n").filter((line) => line.trim());

  // Fonction pour convertir **texte** en <strong>texte</strong> et ajouter le compteur
  const convertMarkdownToHtml = (text) => {
    // Convertir les ** en <strong>
    let html = text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");

    // Chercher et remplacer {conteur} par un span avec id="counter"
    html = html.replace(
      /\{conteur\}/g,
      '<span id="counter" class="font-bold inline-block min-w-[3.5rem] relative overflow-hidden" style="top: 8px;">0</span>'
    );

    return html;
  };

  // Extraire le titre (première ligne avec #)
  const titleLine = lines.find((line) => line.startsWith("# "));
  let title = titleLine
    ? convertMarkdownToHtml(titleLine.replace("# ", ""))
    : "Destination Castagniccia Casinca,";

  // Extraire le sous-titre (première ligne avec ##)
  const subtitleLine = lines.find((line) => line.startsWith("## "));
  let subtitle = subtitleLine
    ? convertMarkdownToHtml(subtitleLine.replace("## ", ""))
    : "à la découverte d'une Corse authentique, entre villages perchés, plages et saveurs du terroir";

  // Extraire la description (tout le reste sans les # et ##)
  const descriptionLines = lines.filter((line) => !line.startsWith("#"));
  let description =
    descriptionLines.length > 0
      ? convertMarkdownToHtml(descriptionLines.join(" "))
      : "Explorez l'une des régions les plus authentiques de Corse...";

  return { title, subtitle, description };
};

const heroContent = parseHeroText(data?.texte);
---

<section
  class="relative w-full overflow-hidden bg-gray-50 py-16 px-4 sm:px-6 lg:px-8"
>
  <!-- Animation d'arrière-plan moderne avec gradients -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <canvas
      id="backgroundCanvas"
      class="absolute inset-0 w-full h-full opacity-30"></canvas>

    <!-- Dégradé d'opacité smooth vers le blanc -->
    <div
      class="absolute inset-0 bg-gradient-to-b from-transparent via-white/20 to-white pointer-events-none"
    >
    </div>
  </div>

  <div class="max-w-7xl mx-auto relative z-10">
    <div class="relative" id="hero-content">
      <h1 class="text-center">
        <div
          class="block text-4xl md:text-5xl lg:text-6xl tracking-tight text-gray-900 opacity-0"
          id="title-part1"
          set:html={heroContent.title}
        />
      </h1>

      <div class="mt-2 text-center">
        <h2 class="text-xl md:text-4xl font-medium text-gray-700">
          <div
            class="inline-block opacity-0 transform"
            id="subtitle-part1"
            set:html={heroContent.subtitle}
          />
        </h2>
      </div>

      <div
        class="mt-6 max-w-3xl mx-auto text-center opacity-0"
        id="description"
      >
        <p class="text-lg text-gray-700" set:html={heroContent.description} />
      </div>

      <div class="mt-4 flex flex-col sm:flex-row justify-center gap-4">
        {
          data?.Boutons?.map((bouton, index) => {
            // Classes CSS de base pour tous les boutons
            let cssClasses = `inline-block px-8 py-4 text-base font-medium rounded-md shadow-sm opacity-0 transform translate-y-4 hero-btn`;

            // Construire le style inline avec les couleurs hexadécimales
            let inlineStyles = [];

            // Définir les couleurs pour les custom properties CSS
            const bgColor =
              bouton.Couleur || (index === 0 ? "#000000" : "#ffffff");
            const textColor =
              bouton.TexteColor || (index === 0 ? "#ffffff" : "#1f2937");
            const borderColor =
              bouton.BorderColor || (index !== 0 ? "#d1d5db" : "transparent");

            // CSS Custom Properties pour le hover dynamique
            inlineStyles.push(`--btn-bg: ${bgColor}`);
            inlineStyles.push(`--btn-text: ${textColor}`);
            inlineStyles.push(`--btn-border: ${borderColor}`);

            // Background color (Couleur)
            inlineStyles.push(`background-color: var(--btn-bg)`);

            // Text color (TexteColor)
            inlineStyles.push(`color: var(--btn-text)`);

            // Border color (BorderColor)
            if (bouton.BorderColor || index !== 0) {
              inlineStyles.push(`border: 1px solid var(--btn-border)`);
            }

            // Joindre tous les styles inline
            const styleAttribute = inlineStyles.join("; ");

            return (
              <a
                href={bouton.Lien}
                class={cssClasses}
                style={styleAttribute}
                id={`btn-${index}`}
              >
                {bouton.Label}
              </a>
            );
          })
        }
        {
          !data?.Boutons && (
            <>
              <a
                href="/carte-interactive"
                class="inline-block px-8 py-4 text-base font-medium text-white bg-black rounded-md shadow-sm hover:bg-gray-900 opacity-0 transform translate-y-4"
                id="btn-carte"
              >
                Carte interactive
              </a>
              <a
                href="/incontournables"
                class="inline-block px-8 py-4 text-base font-medium text-gray-900 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 opacity-0 transform translate-y-4"
                id="btn-incontournables"
              >
                Incontournables
              </a>
            </>
          )
        }
      </div>
    </div>
  </div>

  <div class="mt-16">
    <HeroGallery client:only images={data?.images} />
  </div>
</section>

<script define:vars={{ apiUrl: import.meta.env.PUBLIC_API_URL }}>
  // Variable globale pour l'URL de l'API
  window.API_URL = apiUrl;

  // Attend que le DOM soit complètement chargé
  document.addEventListener("DOMContentLoaded", function () {
    // Animation d'entrée séquentielle pour chaque élément de texte
    animateHeroSequence();

    // Initialisation de l'animation d'arrière-plan
    initModernBackgroundAnimation();
  });

  // Animation séquentielle du héros
  function animateHeroSequence() {
    // Tableau des éléments à animer dans l'ordre
    const elements = [
      { id: "title-part1", delay: 300 },
      { id: "subtitle-part1", delay: 600 },
      { id: "description", delay: 1100 },
      { id: "btn-0", delay: 1300 },
      { id: "btn-1", delay: 1450 },
      { id: "btn-carte", delay: 1300 },
      { id: "btn-incontournables", delay: 1450 },
    ];

    // Application des classes de transition
    elements.forEach((element) => {
      const el = document.getElementById(element.id);
      if (el) {
        // Appliquer des transitions différentes selon le type d'élément
        if (element.id.includes("title")) {
          el.style.transition =
            "opacity 0.8s ease-out, transform 0.9s cubic-bezier(0.13, 0.77, 0.33, 1)";
          el.style.transform = "translateY(30px)";
        } else if (element.id.includes("subtitle")) {
          el.style.transition =
            "opacity 0.7s ease-out, transform 0.8s cubic-bezier(0.16, 1, 0.3, 1)";
          el.style.transform = "translateY(15px)";
        } else if (element.id === "description") {
          el.style.transition = "opacity 1s ease-out";
        } else if (element.id.includes("btn")) {
          el.style.transition =
            "opacity 0.7s ease-out, transform 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)";
        }
      }
    });

    // Animation séquentielle avec délais personnalisés
    elements.forEach((element) => {
      setTimeout(() => {
        const el = document.getElementById(element.id);
        if (el) {
          el.style.opacity = "1";
          el.style.transform = "translateY(0)";

          // Si c'est le paragraphe de description, déclencher l'animation du compteur
          if (element.id === "description") {
            setTimeout(animateCounter, 500);
          }
        }
      }, element.delay);
    });
  }

  // Animation du compteur améliorée avec effet visuel et appel API
  async function animateCounter() {
    const counter = document.getElementById("counter");
    if (!counter) return; // Si pas de compteur, on ne fait rien

    let targetValue = 12300; // valeur par défaut

    try {
      // Récupérer l'URL de l'API depuis la variable globale
      const apiUrl = window.API_URL || window.location.origin;
      const response = await fetch(`${apiUrl}/api/visiteurs`);

      if (response.ok) {
        const data = await response.json();
        targetValue =
          data.count || data.visiteurs || data.nombre || targetValue;
      }
    } catch (error) {
      console.log(
        "Impossible de récupérer le nombre de visiteurs, utilisation de la valeur par défaut"
      );
    }

    const duration = 2500; // 2.5 secondes
    const steps = 60; // Augmenté pour une animation plus fluide
    const easeOutCubic = (t) => 1 - Math.pow(1 - t, 3); // Fonction d'easing

    // Préparation du style
    counter.style.position = "relative";
    counter.style.overflow = "hidden";
    // top: 8px déjà appliqué dans le HTML initial

    // Ajoute les styles d'animation si pas déjà présents
    if (!document.getElementById("counter-animations")) {
      const style = document.createElement("style");
      style.id = "counter-animations";
      style.textContent = `
      @keyframes flash-highlight {
        0% { color: inherit; transform: scale(1); }
        30% { color: #2196F3; transform: scale(1.15); }
        100% { color: inherit; transform: scale(1); }
      }
      @keyframes pulse-number {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
      }
    `;
      document.head.appendChild(style);
    }

    // Fonction pour formater les nombres avec K, M, G
    function formatNumber(num) {
      if (num >= 1000000000) {
        // Format milliards (G)
        return (num / 1000000000).toFixed(1).replace(/\.0$/, "") + "G";
      } else if (num >= 1000000) {
        // Format millions (M)
        return (num / 1000000).toFixed(1).replace(/\.0$/, "") + "M";
      } else if (num >= 1000) {
        // Format milliers (K)
        return (num / 1000).toFixed(1).replace(/\.0$/, "") + "K";
      } else {
        // Format normal
        return num.toString();
      }
    }

    let startTimestamp = null;

    // Utilisation de requestAnimationFrame pour une animation plus fluide
    function animationStep(timestamp) {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);

      // Applique easing pour un effet plus naturel
      const easedProgress = easeOutCubic(progress);
      const value = Math.floor(targetValue * easedProgress);

      // Format le nombre selon sa taille
      const prevText = counter.textContent;
      const formattedValue = formatNumber(value);
      counter.textContent = formattedValue;

      // Effet visuel pendant le changement de chiffres
      if (prevText !== counter.textContent) {
        counter.style.animation = "pulse-number 0.2s ease-out";
        setTimeout(() => {
          counter.style.animation = "";
        }, 200);
      }

      if (progress < 1) {
        requestAnimationFrame(animationStep);
      } else {
        // Animation terminée, affiche le format final
        counter.style.animation = "flash-highlight 0.6s ease-out";
        counter.textContent = formatNumber(targetValue);

        // Supprime l'animation après qu'elle soit terminée
        setTimeout(() => {
          counter.style.animation = "";
        }, 600);
      }
    }

    requestAnimationFrame(animationStep);
  }

  // Animation d'arrière-plan moderne avec des gradients
  function initModernBackgroundAnimation() {
    const canvas = document.getElementById("backgroundCanvas");
    const ctx = canvas.getContext("2d");

    // Détection des appareils mobiles et de la performance
    const isMobile =
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      ) || window.innerWidth <= 768;
    const isLowPerformance = isMobile || navigator.hardwareConcurrency <= 2;

    // Configuration adaptative selon l'appareil
    const config = {
      gradientCount: isLowPerformance ? 3 : 7,
      animationFPS: isLowPerformance ? 30 : 60,
      maxGradientSize: isLowPerformance ? 200 : 300,
      minGradientSize: isLowPerformance ? 100 : 200,
      speedMultiplier: isLowPerformance ? 0.5 : 1,
      fadeOpacity: isLowPerformance ? 0.08 : 0.03,
    };

    // Throttle pour limiter la fréquence d'animation sur mobile
    let lastAnimationTime = 0;
    const animationInterval = 1000 / config.animationFPS;

    // Ajuste la taille du canvas pour qu'il occupe toute la zone
    function resizeCanvas() {
      const dpr = window.devicePixelRatio || 1;
      const displayWidth = window.innerWidth;
      const displayHeight = window.innerHeight;

      // Réduction de la résolution sur mobile pour améliorer les performances
      const scale = isMobile ? 0.5 : 0.75;

      canvas.width = displayWidth * dpr * scale;
      canvas.height = displayHeight * dpr * scale;
      canvas.style.width = displayWidth + "px";
      canvas.style.height = displayHeight + "px";

      ctx.scale(dpr * scale, dpr * scale);
    }

    resizeCanvas();

    // Throttle resize pour éviter trop d'appels
    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(resizeCanvas, 100);
    });

    // Palette de couleurs inspirée de la Corse (bleu mer, vert maquis, ocre terre)
    const colors = [
      { r: 65, g: 154, b: 214, a: isLowPerformance ? 0.2 : 0.4 }, // Bleu clair (mer)
      { r: 107, g: 178, b: 140, a: isLowPerformance ? 0.15 : 0.3 }, // Vert (maquis)
      { r: 227, g: 181, b: 130, a: isLowPerformance ? 0.15 : 0.3 }, // Ocre (terres)
      { r: 75, g: 119, b: 190, a: isLowPerformance ? 0.15 : 0.3 }, // Bleu médium
      { r: 144, g: 190, b: 109, a: isLowPerformance ? 0.12 : 0.25 }, // Vert clair
    ];

    // Création des gradients
    const gradients = [];

    for (let i = 0; i < config.gradientCount; i++) {
      const color = colors[Math.floor(Math.random() * colors.length)];

      gradients.push({
        x: (Math.random() * canvas.width) / (window.devicePixelRatio || 1),
        y: (Math.random() * canvas.height) / (window.devicePixelRatio || 1),
        size:
          Math.random() * (config.maxGradientSize - config.minGradientSize) +
          config.minGradientSize,
        color: color,
        speedX: (Math.random() - 0.5) * 0.3 * config.speedMultiplier,
        speedY: (Math.random() - 0.5) * 0.3 * config.speedMultiplier,
        pulseSpeed: (Math.random() * 0.02 + 0.01) * config.speedMultiplier,
        pulseDirection: 1,
        pulseAmplitude: Math.random() * 0.2 + 0.1,
        baseSize:
          Math.random() * (config.maxGradientSize - config.minGradientSize) +
          config.minGradientSize,
        angle: 0,
        rotationSpeed: (Math.random() - 0.5) * 0.0005 * config.speedMultiplier,
      });
    }

    // Animation des gradients avec optimisations
    function animate(currentTime) {
      // Throttle animation sur mobile
      if (currentTime - lastAnimationTime < animationInterval) {
        requestAnimationFrame(animate);
        return;
      }
      lastAnimationTime = currentTime;

      // Création d'un fondu progressif plutôt que d'effacer complètement
      ctx.fillStyle = `rgba(250, 250, 250, ${config.fadeOpacity})`;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Dessine et anime chaque gradient
      gradients.forEach((gradient) => {
        // Création du gradient radial avec optimisation
        const grd = ctx.createRadialGradient(
          gradient.x,
          gradient.y,
          0,
          gradient.x,
          gradient.y,
          gradient.size
        );

        // Définition des couleurs du gradient
        grd.addColorStop(
          0,
          `rgba(${gradient.color.r}, ${gradient.color.g}, ${gradient.color.b}, ${gradient.color.a})`
        );
        grd.addColorStop(
          1,
          `rgba(${gradient.color.r}, ${gradient.color.g}, ${gradient.color.b}, 0)`
        );

        ctx.beginPath();
        ctx.arc(gradient.x, gradient.y, gradient.size, 0, Math.PI * 2);
        ctx.fillStyle = grd;
        ctx.fill();

        // Animation de pulsation simplifiée sur mobile
        if (!isLowPerformance) {
          gradient.size =
            gradient.baseSize +
            Math.sin(gradient.angle) *
              gradient.pulseAmplitude *
              gradient.baseSize;
          gradient.angle += gradient.pulseSpeed;
        }

        // Déplacement lent
        gradient.x += gradient.speedX;
        gradient.y += gradient.speedY;

        // Rotation lente autour du centre (désactivée sur mobile)
        if (!isLowPerformance) {
          const centerX = canvas.width / (window.devicePixelRatio || 1) / 2;
          const centerY = canvas.height / (window.devicePixelRatio || 1) / 2;
          const dx = gradient.x - centerX;
          const dy = gradient.y - centerY;
          const distance = Math.sqrt(dx * dx + dy * dy);
          const currentAngle = Math.atan2(dy, dx);
          const newAngle = currentAngle + gradient.rotationSpeed;

          gradient.x = centerX + Math.cos(newAngle) * distance;
          gradient.y = centerY + Math.sin(newAngle) * distance;
        }

        // Si le gradient sort du canvas, le replacer
        const buffer = gradient.size;
        const canvasDisplayWidth =
          canvas.width / (window.devicePixelRatio || 1);
        const canvasDisplayHeight =
          canvas.height / (window.devicePixelRatio || 1);

        if (
          gradient.x < -buffer ||
          gradient.x > canvasDisplayWidth + buffer ||
          gradient.y < -buffer ||
          gradient.y > canvasDisplayHeight + buffer
        ) {
          if (Math.random() > 0.5) {
            // Replace horizontalement
            gradient.x =
              Math.random() > 0.5 ? -buffer : canvasDisplayWidth + buffer;
            gradient.y = Math.random() * canvasDisplayHeight;
          } else {
            // Replace verticalement
            gradient.y =
              Math.random() > 0.5 ? -buffer : canvasDisplayHeight + buffer;
            gradient.x = Math.random() * canvasDisplayWidth;
          }
        }
      });

      requestAnimationFrame(animate);
    }

    // Démarre l'animation avec un délai
    setTimeout(() => {
      requestAnimationFrame(animate);
    }, 800);

    // Pause l'animation quand la page n'est pas visible (économie de batterie)
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        // Page cachée, on peut mettre en pause l'animation
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      } else {
        // Page visible, on redémarre l'animation
        requestAnimationFrame(animate);
      }
    });
  }
</script>

<style>
  /* Animations CSS pour le compteur */
  @keyframes pulse-number {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }

  @keyframes flash-highlight {
    0% {
      background: rgba(255, 255, 255, 0);
    }
    30% {
      background: rgba(255, 246, 126, 0.3);
    }
    100% {
      background: rgba(255, 255, 255, 0);
    }
  }

  /* Effets de hover dynamique pour les boutons */
  .hero-btn {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .hero-btn::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      color-mix(in srgb, var(--btn-bg) 85%, white 15%),
      color-mix(in srgb, var(--btn-bg) 90%, black 10%)
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .hero-btn:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow:
      0 8px 25px color-mix(in srgb, var(--btn-bg) 30%, transparent 70%),
      0 4px 12px color-mix(in srgb, var(--btn-bg) 20%, transparent 80%);
  }

  .hero-btn:hover::before {
    opacity: 1;
  }

  .hero-btn:active {
    transform: translateY(-1px) scale(1.01);
    transition: all 0.1s ease;
  }

  /* Amélioration pour les boutons clairs/blancs */
  .hero-btn:hover {
    filter: brightness(0.96) saturate(1.1);
  }

  /* Animation de focus pour l'accessibilité */
  .hero-btn:focus-visible {
    outline: 2px solid color-mix(in srgb, var(--btn-bg) 70%, transparent 30%);
    outline-offset: 2px;
  }
</style>
