---
import Layout from "../../layouts/Layout.astro";
import type {
  RootInformationPratique,
  Daum,
  TypeInformationPratique,
} from "../../types/informations-pratiques.ts";
import { convertMarkdownToHtml } from "../../utils/markdownUtils.js";

export async function getStaticPaths() {
  // Récupérer toutes les informations pratiques depuis l'API
  const response = await fetch(
    `${import.meta.env.PUBLIC_API_URL}/api/information-pratiques?populate=type_information_pratique`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    }
  );

  if (!response.ok) {
    console.error(
      "Erreur lors de la récupération des informations pratiques:",
      response.status
    );
    return [];
  }

  const informationsData: RootInformationPratique = await response.json();

  if (!informationsData || !informationsData.data) {
    console.error("Données informations pratiques non disponibles");
    return [];
  }

  // Grouper par type d'information pratique
  const categoriesMap = new Map<
    string,
    { type: TypeInformationPratique; informations: Daum[] }
  >();

  informationsData.data.forEach((info) => {
    const typeDocumentId = info.type_information_pratique.documentId;
    if (!categoriesMap.has(typeDocumentId)) {
      categoriesMap.set(typeDocumentId, {
        type: info.type_information_pratique,
        informations: [],
      });
    }
    categoriesMap.get(typeDocumentId)!.informations.push(info);
  });

  // Générer les paths statiques
  return Array.from(categoriesMap.entries()).map(
    ([documentId, categoryData]) => ({
      params: {
        slug: documentId,
      },
      props: {
        category: categoryData.type,
        informations: categoryData.informations,
      },
    })
  );
}

const { slug } = Astro.params;
const { category, informations } = Astro.props;

if (!category || !informations) {
  return Astro.redirect("/404");
}

const title = `${category.Titre} - Informations pratiques - Castagniccia Casinca`;
---

<Layout
  title={title}
  pageCategory="informations-pratiques"
  pageName={category.Titre}
>
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <!-- Breadcrumb -->
      <nav class="mb-8">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
          <li><a href="/" class="hover:text-gray-700">Accueil</a></li>

          <li>
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"
              ><path
                fill-rule="evenodd"
                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                clip-rule="evenodd"></path></svg
            >
          </li>
          <li class="text-gray-900 font-medium">{category.Titre}</li>
        </ol>
      </nav>

      <!-- Contenu des informations -->
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="p-6 lg:p-8">
          <div class="prose max-w-none">
            {
              informations.map((info, index) => (
                <div
                  class={index > 0 ? "mt-12 pt-8 border-t border-gray-200" : ""}
                >
                  <div
                    class="markdown-content"
                    set:html={convertMarkdownToHtml(info.Texte)}
                  />
                  {index < informations.length - 1 && (
                    <div class="mt-8 text-center">
                      <div class="inline-flex items-center space-x-2 text-gray-400">
                        <div class="w-2 h-2 bg-gray-300 rounded-full" />
                        <div class="w-2 h-2 bg-gray-300 rounded-full" />
                        <div class="w-2 h-2 bg-gray-300 rounded-full" />
                      </div>
                    </div>
                  )}
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="mt-8 flex justify-between items-center">
        <a
          href="/informations-pratiques"
          class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200"
        >
          <svg
            class="w-5 h-5 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          Retour aux catégories
        </a>

        <div class="text-sm text-gray-500">
          Dernière mise à jour : {
            new Date(
              Math.max(
                ...informations.map((info) =>
                  new Date(info.updatedAt).getTime()
                )
              )
            ).toLocaleDateString("fr-FR")
          }
        </div>
      </div>
    </div>
  </div>
</Layout>
